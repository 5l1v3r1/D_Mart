/------------------------추천 시스템에 사용되는 쿼리 설명----------------------------/

신규 고객 상품 추천 서비스 : user_initial.jsp? select문으로 뽑아냄

--일련의 방식들은 view가 아닌 select 방식으로 이루어지고 있다. 그러므로 DataBase에 정보가 Create,Delete,Update될시 정보가 바로 갱신된다.--

1. 신규 고객의 성별에 따른 추천 서비스 : 신규 고객의 성별에 따라 해당 성별이 가장 많이 구매한 아이템을 Top5 형식으로 보여준다.
C.Gender 컬럼에 사용자의 성별을 웹사이트에 접속한 유저 정보로부터 받아와서 select 쿼리를 날리는 형식을 채용했다. 사용자,구매리스트,아이템 3개 테이블을 조인한 뒤 IName으로 그루핑한 뒤 카운팅을 통해 탑 5을 추출하였다.

ex) boy 일경우
select I.IName,count(*) as total 
from CUSTOMER AS C,ORDER_LIST AS OL ,ITEM AS I 
where C.Gender = 'boy' and OL.lCustomerIDenti = C.CustomerID and OL.Order_list=I.IName group by I.IName order by total desc limit 5;

2. 신규 고객의 나이에 따른 추천 서비스 : 신규 고객의 나이에 따라 해당 나이대에서 가장 많이 구매한 아이템을 Top5 형식으로 보여준다.
데이터가 적은 관계로 정확한 나이로 비교하는게 아닌 나이대 ex)14살이면 10대 22살이면 20대 33살이면 30대 로 구분 하여 나이대에 따른 구매한 아이템을 select 쿼리를 이용하여 구현하였다.
나이는 웹사이트에 접속한 유저 정보로부터 받아온다.
나이대는 application 레벨에서 처리하여 쿼리에 기입하게 한다. ex) age = 15살 -> age between 10 and 19 (10대이다)

ex) Age 24일경우 application레벨에서 자동으로 20대인걸 판단 후 쿼리에 20 과 29를 기입해준다.
select I.IName,count(*) as total 
from CUSTOMER AS C,ORDER_LIST AS OL ,ITEM AS I 
where C.Age BETWEEN 20 and 29 and OL.lCustomerIDenti = C.CustomerID and OL.Order_list=I.IName group by I.IName order by total desc limit 5;

3.신규 고객의 나이와 성별에 따른 추천 서비스 : 신규 고객의 나이와 성별에 따라 해장 사용자층이 가장 구매한 아이템을 Top5 형식으로 보여준다.
앞서 사용한 1번쿼리와 2번쿼리를 합쳐 만든 쿼리이다. 마찬가지로 나이와 성별은 웹사이트에 접속한 유저 정보로부터 받아온다. 

ex) boy , Age 24일 경우
select I.IName,count(*) as total 
from CUSTOMER AS C,ORDER_LIST AS OL ,ITEM AS I 
where C.Gender = 'boy'and C.Age BETWEEN 20 and 29 and OL.lCustomerIDenti = C.CustomerID and OL.Order_list=I.IName group by I.IName order by total desc limit 5;



/-------------------------------인덱스에 사용된 쿼리 설명-----------------------------/

INDEX 설명 
idx_mall :
	sql : create INDEX idx_mall on MALL (City);
	이유 : 효율적인 인덱싱을 위해선 카디날리티가 높은 컬럼을 기준을 택해야한다. 
		  데이터를 살펴본 결과 mall 에선 city 의 카디날리티가 높고 select 쿼리에서 많이 사용될 것 같은 예측이 되어 인덱싱을 추가하였다.

		  
idx_category :
	sql : create INDEX idx_category on CATEGORY (Small_category);
	이유 : 효율적인 인덱싱을 위해선 카디날리티가 높은 컬럼을 기준을 택해야한다. 
		  데이터를 살펴본 결과 category 에선 Small_category 의 카디날리티가 높고 select 쿼리에서 많이 사용될 것 같은 예측이 되어 인덱싱을 추가하였다.



idx_item :
	sql : create INDEX idx_item on ITEM (IName,Stock);
	이유 : 복수 컬럼을 인덱스에 사용할 경우 카디날리티가 높은걸 우선 배치한 후 낮은걸 배치해야 성능에 더 기여한다.
		  데이터를 살펴본 결과 item 에선 IName의 카디날리티가 Stock보다 더 높으므로 우선 배치하였다. 또한 IName과  Stock는 후의 select 쿼리에서 많이 사용될 것 같은 예측이 되어 인덱싱을 추가하였다.
		  Stock의 경우 잦은 update가 있을 순 있지만 update를 하기전에 select 즉 먼저 조회를 해야하기때문에 인덱싱에 추가하였다.
		  

		  create INDEX idx_customer on CUSTOMER (CID_String);

idx_customer :
	sql : create INDEX idx_customer on CUSTOMER (CID_String);
	이유 : 사용자의 ID 문자열 ex '현태123' 의 경우 또한 유저 어플리케이션에서 자주 사용될 가능성이 크고 카디날리티가 높으므로 인덱싱에 추가하였다.

idx_cart :
	sql : create INDEX idx_cart on CART (CDate);
	이유 : CDate는 후에 조회될 가능성(날짜별 상품 베스트 등등)이 높으므로 인덱싱에 추가하였다.
	
	
	
	
/------------------------------쇼핑몰 필수 기능 쿼리 ------------------------------/

	
1.회원관련기능
회원가입 : 회원정보 기입 -> 인서트 CUSTOMER (인서트 아이디 번호로 되어있는거 네임버전으로도 추가)
회원정보수정 : 회원정보 업데이트 기능(어플리케이션 레벨에서 아이디 변경을 제하낳ㄴ다.)
비밀번호 수정 : 회원정보 업데이트 기능(CUSTOMER Password) , 
로그인 : 아이디와 패스워드가 쿼리로 날라가서 커스터머에서 있는지 없는지 찾음 (앤드 연산) 참이면 로그인
관리자 계정 : root 1234 로 하자 디비에 수동으로 넣자

로그인 : login.jsp / html 
회원가입 : signin.jsp / html
회원정보수정 : memberupdate.jsp / html
관리자 로그인 : admin_login.jsp / html

회원가입 실행시 => 
select CustomerID from CUSTOMER order by CustomerID desc limit 1; 호출하여 가장 높은 cutomerid 받아옴
여기서 customerid는 정수값임 (string형태의 아이디는 맨 마지막 에 기입);
거기에 +1 한 값을 a을
insert into CUSTOMER VALUES(a,"password",age,"gender","phone_number","job","Roadname_address","Detailed_address","ID")
ex) insert into CUSTOMER VALUES(a,"1234",19,"boy","123-123","slave","myhome","sweethome","hyun123")
로그인 =>
select count(*) from CUSTOMER where CID_String="user1" and Password="1234"
결과가 1일시 로그인 성공, 아닐시 실패

관리자 로그인=>
로그인과 똑같은 쿼리를 날린다 단 application level에서 id=root일경우로 조건문을 줘서 root 권한을 부여한다.

비밀번호 수정=>
update CUSTOMER set Password='12345' WHERE CID_String='user1'

회원정보 수정=>
update CUSTOMER set Password='~', Age=~, Gender='~', Phone_number='~', Job='~', Roadname_address='~',Detailed_address='~' where CID_String='id'
ex) update CUSTOMER set Password='1234', Age=14,Gender='boy', Phone_number='', Job='slave', Roadname_address='',Detailed_address='' where CID_String='user1';


2.물품관련기능
* 아이템들은 지역별 매장별로 있다.

카테고리선택->물품리스트 : 디비에서부터 데이터를 CATEGORY,ITEM 갖고와서 데이터 뿌려주기 (select cateogry,item)
아이템검색 : 아이템을 검색한 뒤 정보 뿌려주기(ITEM Select)
아이템 검색후 클릭하면 그 물품 정보창 출력, 해당 물품 유저 장바구니에 추가  (item select, insert cart_product_list)
재고 부족 (select item 재고, 비교후 어플리케이션레벨에서거절)
카테고리 선택 : 대분류에서 과일/견과는 fruit.jsp, 채소는 vegetable.jsp, 과자/초콜릿/시리얼/빵은 snack.jsp
검색  : 대분류별로 할거면 카테고리 선택이랑 같고 전체 안에서 할거면 productlist.jsp

장바구니에 추가=>
 select CartID,CustomerIDe from CART ,CUSTOMER where CustomerIDe=CustomerID and CID_String='user1';
로 카트 id와 사용자 id를 받아온 다음  
어느 지점의 아이템을 살껀지 픽한뒤 ex)seoul 
(리스트는 이 쿼리에서 뽑아온다. select City,Inumber,IName from ITEM,MALL where IName='potato100g' and Mnumber=Mnum;)
위리스트에서 받아온 Inumber 와 사용자정보, 아이템이름을 기반으로 쿼리를 이렇게 넣으면된다.
INSERT INTO VALUES CART_PRODUCT_LIST ('아이템이름', CartID, CustomerIDe,Inumber) ;
으로 추가하면된다.

카테고리선택->물품리스트 : 
카테고리 => select * from CATEGORY 
의 결과를 기반으로 Large category, small category를 뿌려준다.
small 카테고리를 누르면 물품 리스트가 출력되야한다.
물품리스트=> 
select distinct IName from ITEM AS I,CATEGORY AS C where C.Large_category='vegetable' and C.Small_category='potato' and I.Cnum=C.Cnumber;
small category는 클릭정보, largecategory는 스몰카테고리의 상위정보를 통해서 받아와야한다.

아이템 검색=>
ex) select * from ITEM where IName='potato100g' limit 1; 
의 결과값을 통해 뿌려주기

재고 부족=>
select City,Inumber,IName from ITEM,MALL where IName='potato100g' and Mnumber=Mnum;)
위에서 Inumber을 받아온 후
ex) select count(Stock) from ITEM where IName='potato100g' and INumber=받아온Inumber ; 
햇을때 결과값이 0이하이다. 재고부족이다.

3.장바구니관련기능
그냥 디비레벨에서 저장했으니 당연한것 계속 저장되잇음
장바구니 정보를 받아오는 기능 =>
select Product_list,City from MALL,ITEM,CART_PRODUCT_LIST,CUSTOMER where CID_String='user1' and CustomerID=CustomerIden and INumber=Inum_c and Mnumber=Mnum;
쿼리를 이용하면 장바구니에 있는 상품리스트를 알려준다.

Cartlist.jsp

4.구매관련기능

장배구니에서만 구매가능(장바구니 페이지에서만 구매 버튼 활성화 (insert order list)
첫번쟤 컬럼엔 상품 이름, 두번째 세번쨰 컬럼엔 유저 아이디에 맞는 유저 
불러온 장바구니에서 
구매내역확인 : order_ orderlies select
구매내역확인 : orderlist.jsp

장바구니 구매=> 즉 주문(오더)
set tx_isolation = 'READ-COMMITTED';
동시성제어를 위한 트랙잭션 레벨 성정
select Onumber from ORDER_ des limit 1;
최신 오더넘버를 받아온후 거기에+1을 한다 a=a+1
INSERT INTO ORDER_ VALUES(0,1,"2018-11-28","2018-11-28",a);
첫번쨰컬럼은 0 고정, 두번쨰컬럼은 유저 아이디의 int값 와 같이 오늘의 날짜를 넣는다.
INSERT INTO ORDER_LIST VALUES (0,1,1,'SOGAsmoothJJIgetofu',9);
첫번쨰컬럼은 0 고정, 두번쨰 세번쨰에 유저 아이디의 int값, 4번쨰엔 상품이름, 5번쟤엔 상품고유번호를 넣는다.
UPDATE ITEM SET stock=stock-1 WHERE INumber=상품고유번호;
로 재고를 1감소해주자
commit;
커밋하자

구매내역확인 =>
유저 닉네임을 넣으면 유저가 어느 매장에 있는 제품을 샀는지 정보가 출력된다.(제품은 매장지역별로 있다.)
1 자리엔 유저 아이디의 int값이 들어간다.
select Order_list,Start_time from ORDER_, ORDER_LIST where  1=CustomerIDenti and Onumber=lOnumber;

5.관리자기능 - 관리자계정접속용
(어플리케이션 레벨에서 제한)
재고 증가 - insert item stock
재고 모자란 리스트 - select item stock
전체 매출,월별 매출, 일별 매출->item value order 할때마다
Value 증가시키는 ㄷ비만드럭나 뷰로 니가 빼내기
 
재고 증가 및 재고 모자란 리스트 : product_manage.jsp
매출 관리 : order_manage.jsp

재고 모자란 리스트 확인 =>
select IName,INumber,City,stock from MALL,ITEM where Mnumber=Mnum and stock<=0;

재고 증가 =>
a는 사용자가 증가시키고 싶은 재고숫자
update ITEM set stock=stock+a where Inumber = 상품고유번호;

전체 매출 ,월별 매출, 일별 매출 =>
전체 매출 :
select sum(result.price) from
(select distinct O.Onumber, I.price
from ORDER_LIST AS OL,ITEM AS I,ORDER_ AS O
where I.IName=OL.Order_list and O.Onumber=OL.lOnumber ) AS result;

월별 매출 : 
2018년의 10월달 매출 보고싶을경우 쿼리는 저렇게
select sum(result.price) from
(select distinct O.Onumber, I.price
from ORDER_LIST AS OL,ITEM AS I,ORDER_ AS O
where I.IName=OL.Order_list and O.Onumber=OL.lOnumber and O.Start_time between '2018-10-00' and '2018-10-31') AS result;
일별 매출 : 
start_time='날짜입력'
select sum(result.price) from
(select distinct O.Onumber, I.price
from ORDER_LIST AS OL,ITEM AS I,ORDER_ AS O
where I.IName=OL.Order_list and O.Onumber=OL.lOnumber and O.Start_time='2017-10-4') AS result;


/--------------------- 트랜잭션 관련 쿼리 ----------------------/
마트에서 트랜잭션 처리를 헤야할 상황 
-> 제품의 구매 -> 장바구니에 있는걸 주문(오더)구매 할 경우 발생

	




추천 시스템에 사용되는 쿼리 설명

신규 고객을 위한 추천 서비스
--일련의 방식들은 view가 아닌 select 방식으로 이루어지고 있다. 그러므로 DataBase에 정보가 Create,Delete,Update될시 정보가 바로 갱신된다.--

1. 신규 고객의 성별에 따른 추천 서비스 : 신규 고객의 성별에 따라 해당 성별이 가장 많이 구매한 아이템을 Top5 형식으로 보여준다.
C.Gender 컬럼에 사용자의 성별을 웹사이트에 접속한 유저 정보로부터 받아와서 select 쿼리를 날리는 형식을 채용했다. 사용자,구매리스트,아이템 3개 테이블을 조인한 뒤 IName으로 그루핑한 뒤 카운팅을 통해 탑 5을 추출하였다.

ex) boy 일경우
select I.IName,count(*) as total 
from CUSTOMER AS C,ORDER_LIST AS OL ,ITEM AS I 
where C.Gender = 'boy' and OL.lCustomerIDenti = C.CustomerID and OL.Order_list=I.IName group by I.IName order by total desc limit 5;

2. 신규 고객의 나이에 따른 추천 서비스 : 신규 고객의 나이에 따라 해당 나이대에서 가장 많이 구매한 아이템을 Top5 형식으로 보여준다.
데이터가 적은 관계로 정확한 나이로 비교하는게 아닌 나이대 ex)14살이면 10대 22살이면 20대 33살이면 30대 로 구분 하여 나이대에 따른 구매한 아이템을 select 쿼리를 이용하여 구현하였다.
나이는 웹사이트에 접속한 유저 정보로부터 받아온다.
나이대는 application 레벨에서 처리하여 쿼리에 기입하게 한다. ex) age = 15살 -> age between 10 and 19 (10대이다)

ex) Age 24일경우 application레벨에서 자동으로 20대인걸 판단 후 쿼리에 20 과 29를 기입해준다.
select I.IName,count(*) as total 
from CUSTOMER AS C,ORDER_LIST AS OL ,ITEM AS I 
where C.Age BETWEEN 20 and 29 and OL.lCustomerIDenti = C.CustomerID and OL.Order_list=I.IName group by I.IName order by total desc limit 5;

3.신규 고객의 나이와 성별에 따른 추천 서비스 : 신규 고객의 나이와 성별에 따라 해장 사용자층이 가장 구매한 아이템을 Top5 형식으로 보여준다.
앞서 사용한 1번쿼리와 2번쿼리를 합쳐 만든 쿼리이다. 마찬가지로 나이와 성별은 웹사이트에 접속한 유저 정보로부터 받아온다. 

ex) boy , Age 24일 경우
select I.IName,count(*) as total 
from CUSTOMER AS C,ORDER_LIST AS OL ,ITEM AS I 
where C.Gender = 'boy'and C.Age BETWEEN 20 and 29 and OL.lCustomerIDenti = C.CustomerID and OL.Order_list=I.IName group by I.IName order by total desc limit 5;

인덱스에 사용된 쿼리 설명

INDEX 설명 
idx_mall :
	sql : create INDEX idx_mall on MALL (City);
	이유 : 효율적인 인덱싱을 위해선 카디날리티가 높은 컬럼을 기준을 택해야한다. 
		  데이터를 살펴본 결과 mall 에선 city 의 카디날리티가 높고 select 쿼리에서 많이 사용될 것 같은 예측이 되어 인덱싱을 추가하였다.

		  
idx_category :
	sql : create INDEX idx_category on CATEGORY (Small_category);
	이유 : 효율적인 인덱싱을 위해선 카디날리티가 높은 컬럼을 기준을 택해야한다. 
		  데이터를 살펴본 결과 category 에선 Small_category 의 카디날리티가 높고 select 쿼리에서 많이 사용될 것 같은 예측이 되어 인덱싱을 추가하였다.



idx_item :
	sql : create INDEX idx_item on ITEM (IName,Stock);
	이유 : 복수 컬럼을 인덱스에 사용할 경우 카디날리티가 높은걸 우선 배치한 후 낮은걸 배치해야 성능에 더 기여한다.
		  데이터를 살펴본 결과 item 에선 IName의 카디날리티가 Stock보다 더 높으므로 우선 배치하였다. 또한 IName과  Stock는 후의 select 쿼리에서 많이 사용될 것 같은 예측이 되어 인덱싱을 추가하였다.
		  Stock의 경우 잦은 update가 있을 순 있지만 update를 하기전에 select 즉 먼저 조회를 해야하기때문에 인덱싱에 추가하였다.
		  

		  create INDEX idx_customer on CUSTOMER (CID_String);

idx_customer :
	sql : create INDEX idx_customer on CUSTOMER (CID_String);
	이유 : 사용자의 ID 문자열 ex '현태123' 의 경우 또한 유저 어플리케이션에서 자주 사용될 가능성이 크고 카디날리티가 높으므로 인덱싱에 추가하였다.

idx_cart :
	sql : create INDEX idx_cart on CART (CDate);
	이유 : CDate는 후에 조회될 가능성(날짜별 상품 베스트 등등)이 높으므로 인덱싱에 추가하였다.
	



